// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id                             String   @id @default(cuid())
  username                       String
  firstName                      String
  lastName                       String
  password                       String
  email                          String
  displayName                    String
  bio                            String?
  shortBio                       String?
  location                       String?
  website                        String?
  image                          String?
  coverImage                     String?
  enabledTwoFactorAuthentication Boolean  @default(true)
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  // Relations
  bookmarks     Bookmark[]
  like          Like[]
  notifications Notifications[]
  following     Follows[]       @relation("Following")
  followers     Follows[]       @relation("Followers")
  blogs         Blog[]
  categories    Category[]      @relation("UserCategories")
  Session       Session[]
  Comment       Comment[]
  Reply         Reply[]
  Share         Share[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique // Add the @unique constraint here
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Blog {
  id                String         @id @default(cuid())
  title             String
  content           String         @db.Text
  authorId          String
  estimatedReadTime String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  likes             Like[]
  comments          Comment[]
  images            Image[]
  shares            Share[]
  author            User           @relation(fields: [authorId], references: [id])
  BlogCategory      BlogCategory[]
  Bookmark          Bookmark[]
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  creatorId   String
  createdAt   DateTime @default(now())

  // Relations
  creator        User           @relation("UserCategories", fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  blogCategories BlogCategory[]
}

model BlogCategory {
  blogId     String
  categoryId String

  // Relations
  blog     Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([blogId, categoryId])
}

model Bookmark {
  id     String @id @default(uuid())
  userId String
  blogId String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Like {
  id      String   @id @default(uuid())
  blogId  String
  userId  String
  likedAt DateTime @default(now())
  blog    Blog     @relation(fields: [blogId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user    User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Comment {
  id          String   @id @default(cuid())
  blogId      String
  userId      String
  content     String
  commentedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  blog        Blog     @relation(fields: [blogId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     Reply[]
}

model Reply {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  content   String
  repliedAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Image {
  id     String @id @default(cuid())
  blogId String
  url    String
  blog   Blog   @relation(fields: [blogId], references: [id])
}

model Share {
  id       String @id @default(cuid())
  blogId   String
  userId   String
  platform String
  blog     Blog   @relation(fields: [blogId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user     User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Notifications {
  id        String   @id @default(uuid())
  userId    String
  content   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  commentId String?
  mentionId String?

  @@index([type, read])
}

model Follows {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  // Relations
  follower  User @relation("Followers", fields: [followerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([followerId, followingId])
}
